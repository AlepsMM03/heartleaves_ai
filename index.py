import streamlit as st
import pandas as pd
import numpy as np
import requests
from PIL import Image

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="HeartLeaves AI",
    page_icon="‚ù§Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Funci√≥n para enviar los datos a la API y obtener la predicci√≥n
def predict_with_api(troponin, ck_mb, age):
    url = "https://flask-api-model.onrender.com/predict"  # Cambia esta URL si tu API est√° desplegada en un servidor
    payload = {
        "Troponin": troponin,
        "CK-MB": ck_mb,
        "Age": age
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"‚ùå Error al contactar la API: {e}")
        return None

def main():
    # Cabecera con logos y t√≠tulo
    col1, col2, col3 = st.columns([1, 4, 1])
    with col1:
        st.image("Escudo_UAZ.png", width=100)
    with col2:
        st.title("HeartLeaves AI - Predictor de Infarto con Inteligencia Artificial")
        st.caption("Herramienta de apoyo cl√≠nico basada en aprendizaje autom√°tico")
    with col3:
        st.image("logo2.png", width=100)

    st.markdown("---")

    # Entrada de datos
    with st.container():
        st.header("üìä Datos del Paciente")
        st.write("Ingrese los valores biomarcadores y la edad del paciente:")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            troponin = st.number_input(
                "Nivel de Troponina (ng/mL)", min_value=0.0, max_value=100.0,
                value=0.01, step=0.01, help="Valor normal t√≠pico: <0.04 ng/mL"
            )
        with col2:
            ck_mb = st.number_input(
                "Nivel de CK-MB (U/L)", min_value=0.0, max_value=1000.0,
                value=5.0, step=0.1, help="Valor normal t√≠pico: <5 U/L"
            )
        with col3:
            age = st.number_input(
                "Edad del Paciente", min_value=18, max_value=120,
                value=50, help="Edad en a√±os completos"
            )

    # Bot√≥n de predicci√≥n
    st.markdown("---")
    if st.button("üîç Calcular Riesgo de Infarto", use_container_width=True):
        with st.spinner("Consultando modelo..."):
            result = predict_with_api(troponin, ck_mb, age)
            if result:
                pred = result["prediction"]
                prob = float(result.get("probability", 0.0))

                st.subheader("üìã Resultados de la Predicci√≥n")
                if pred == 1:
                    st.error("**Predicci√≥n:** Riesgo de Infarto detectado")
                else:
                    st.success("**Predicci√≥n:** Sin evidencia de infarto")

                st.write(f"**Probabilidad de Infarto:** {prob*100:.2f}%")
                st.progress(prob)

                # Interpretaci√≥n cl√≠nica
                st.markdown("---")
                st.subheader("üìù Interpretaci√≥n Cl√≠nica")
                if prob < 0.2:
                    st.info("**Bajo riesgo:** Considerar otras causas de los s√≠ntomas.")
                elif prob < 0.5:
                    st.warning("**Riesgo moderado:** Monitoreo continuo y posible repetici√≥n de pruebas.")
                else:
                    st.error("**Alto riesgo:** Requiere intervenci√≥n inmediata y evaluaci√≥n cardiol√≥gica.")

                st.markdown("---")
                st.warning("""
                **Nota importante:**  
                Este resultado es una predicci√≥n automatizada y no debe ser considerado como diagn√≥stico m√©dico definitivo. 
                Siempre debe ser interpretado por un profesional de la salud calificado.
                """)

# Informaci√≥n adicional en la barra lateral
with st.sidebar:
    st.header("‚ÑπÔ∏è Acerca de esta herramienta")
    st.write("""
    Este predictor utiliza un modelo de Random Forest entrenado con datos cl√≠nicos 
    para estimar el riesgo de infarto card√≠aco basado en:
    - Nivel de Troponina
    - Nivel de CK-MB
    - Edad del paciente
    """)
    
    st.markdown("---")
    st.subheader("üìà Rangos de Referencia")
    st.write("""
    **Troponina:**
    - Normal: <0.04 ng/mL
    - Elevaci√≥n leve: 0.04‚Äì0.39 ng/mL
    - Elevaci√≥n significativa: ‚â•0.4 ng/mL

    **CK-MB:**
    - Normal: <5 U/L
    - Elevado: ‚â•5 U/L
    """)
    
    st.markdown("---")
    st.write("Desarrollado por: Jes√∫s Alejandro Montes Medina")
    st.caption("Maestr√≠a en Ciencias del Procesamiento de la Informaci√≥n | Universidad Aut√≥noma de Zacatecas")

if __name__ == "__main__":
    main()
